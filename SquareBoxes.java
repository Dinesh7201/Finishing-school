/*
Pranav has a puzzle board filled with square boxes in the form of a grid.
Some cells in the grid may be empty. '0' - indicates empty, '1' - indicates a box. 

Pranav wants to find out the number of empty spaces which are completely 
surrounded by the square boxes (left, right, top, bottom) in the board.

You are given the board in the form of a grid M*N, filled wth 0's and 1's.
Your task is to help Pranav to find the number of empty groups surrounded by
the boxes in the puzzle board.

Input Format:
-------------
Line-1: Two integers M and N, the number of rows and columns in the board.
Next M lines: contains N space-separated either 0 or 1.

Output Format:
--------------
Print an integer, the number of empty spaces in the puzzle board.


Sample Input-1:
---------------
6 7
1 1 1 1 0 0 1
1 0 0 0 1 1 0
1 0 0 0 1 1 0
0 1 1 1 0 1 0
1 1 1 0 0 1 1
1 1 1 1 1 1 1

Sample Output-1:
----------------
2


Sample Input-2:
---------------
6 6
1 1 0 0 1 1
1 0 1 1 0 1
0 1 0 1 0 0
1 1 0 0 0 1
0 0 1 0 1 1
1 1 0 1 0 0

Sample Output-2:
----------------
1



*/

import java.util.*;

class SquareBoxes{

	int fill(int[][] g, int i, int j) {
	  if (i < 0 || j < 0 || i >= g.length || j >= g[i].length || g[i][j] != 0)
		return 0;
	  return (g[i][j] = 1) + fill(g, i + 1, j) + fill(g, i, j + 1)
		+ fill(g, i - 1, j) + fill(g, i, j - 1);
	}

	public int closedIsland(int[][] g) {
	  for (int i = 0; i < g.length; ++i)
		for (int j = 0; j < g[i].length; ++j)
		  if (i * j * (i - g.length + 1) * (j - g[i].length + 1) == 0)
			fill(g, i, j);
	  int res = 0;
	  for (int i = 0; i < g.length; ++i)
		for (int j = 0; j < g[i].length; ++j)
		  res += fill(g, i, j) > 0 ? 1 : 0;
	  return res;
	}

	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		int m=sc.nextInt();
		int n=sc.nextInt();
		int grid[][]=new int[m][n];
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				grid[i][j]=sc.nextInt();
			}
		}
		
		System.out.println(new SquareBoxes().closedIsland(grid));
	}
}

/*
=== testcases ===
case =1
input =6 7
1 1 1 1 0 0 1
1 0 0 0 1 1 0
1 0 0 0 1 1 0
0 1 1 1 0 1 0
1 1 1 0 0 1 1
1 1 1 1 1 1 1
output =2

case =2
input =6 6
1 1 0 0 1 1
1 0 1 1 0 1
0 1 0 1 0 0
1 1 0 0 0 1
0 0 1 0 1 1
1 1 0 1 0 0
output =1

case =3
input =10 15
0 1 0 0 0 1 0 1 0 0 0 1 1 1 1
0 1 0 1 0 1 1 0 1 0 0 1 0 1 1
0 1 1 1 1 0 0 0 1 1 1 1 1 1 0
0 1 1 0 0 1 0 1 0 0 1 1 0 1 1
1 1 0 0 1 0 0 0 0 1 1 0 1 1 1
1 1 1 0 1 0 1 0 0 1 0 0 0 1 0
1 1 0 1 1 1 0 0 1 0 1 0 1 1 1
1 1 0 1 0 1 0 1 0 0 0 0 1 0 1
1 1 0 0 0 1 0 0 1 0 1 1 0 0 0
1 1 1 1 1 0 1 0 1 0 1 0 0 0 1
output =4

case =4
input =20 15
1 0 1 0 0 0 1 1 0 1 1 1 1 1 0
0 0 0 0 0 0 0 0 0 1 1 1 0 0 1
0 0 0 1 0 1 1 0 0 0 0 0 0 0 1
1 1 0 0 0 1 1 0 1 0 0 1 1 1 0
0 1 1 0 1 1 0 1 1 1 0 0 1 0 1
1 0 1 1 1 0 1 1 0 0 0 0 1 1 1
0 1 0 0 0 0 0 1 1 1 1 0 0 0 1
0 0 1 1 1 1 0 1 1 1 1 1 0 0 0
0 0 0 0 1 1 0 0 0 1 0 1 1 1 1
1 0 0 1 1 1 1 1 1 1 1 1 0 0 0
1 0 0 1 0 1 0 1 0 1 1 0 1 1 1
0 1 1 0 1 1 1 1 1 1 1 0 1 1 1
0 0 0 0 1 0 1 1 1 1 1 0 1 0 1
0 0 0 0 1 1 0 0 1 0 1 0 0 0 0
0 0 1 1 0 0 0 1 0 1 1 0 0 0 1
0 0 0 1 0 1 1 1 0 0 0 1 0 0 1
0 1 1 0 1 1 1 1 1 1 0 1 1 1 0
0 1 0 1 1 1 1 1 0 1 1 0 1 1 0
1 1 1 1 0 1 1 1 1 1 0 1 0 0 0
0 0 0 0 1 0 1 1 1 0 0 1 1 0 0
output =17

case =5
input =20 20
1 1 0 1 1 1 0 0 0 1 1 0 1 0 0 1 0 1 1 0
0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0
1 0 1 1 1 0 1 1 1 1 0 0 0 0 0 0 1 0 1 0
1 0 1 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1
0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0
0 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 1 0 0 0
1 0 0 0 1 1 0 1 1 0 1 0 1 0 0 1 1 1 1 0
1 1 0 0 0 1 0 1 1 1 0 0 1 1 0 1 1 1 1 1
0 0 1 0 0 0 0 0 1 1 0 1 1 0 1 1 1 0 1 1
0 0 0 1 0 1 1 1 0 0 1 1 1 0 0 0 0 0 1 1
1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 0 0 1
1 1 0 0 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0 0
0 0 0 1 1 0 1 1 0 1 1 1 1 0 1 0 1 1 1 0
0 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 0 0 1 1
1 0 0 0 1 1 1 0 0 1 0 1 0 0 0 1 1 1 1 1
0 1 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0
0 1 0 1 0 0 0 0 1 0 1 1 1 1 0 1 0 1 1 0
1 0 1 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1
1 0 0 0 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0
1 0 0 0 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0
output =22

case =6
input =20 30
1 0 0 0 1 0 1 1 0 1 1 0 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0
0 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 0 1
1 1 0 0 1 1 0 1 0 1 0 1 0 1 0 1 1 0 1 0 0 0 1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0 0 0 1 0
0 0 0 1 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0
1 0 1 1 0 1 1 1 0 1 0 0 0 1 1 0 0 0 1 0 1 1 1 0 0 0 1 0 0 0
1 1 0 0 1 0 1 0 1 0 1 1 0 0 1 1 1 0 0 0 1 0 1 1 1 0 1 0 0 1
1 1 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 0 0 1 0 1 1 1 1 1
0 0 1 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 0 1 0 0 1
0 1 1 0 0 1 1 1 1 0 1 0 0 1 1 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0
0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 0 0 1 1 0 1 1
1 0 1 1 1 1 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 0 1 1 1 1 1 0 1
0 0 1 1 1 0 0 1 0 0 0 0 1 1 1 1 1 0 0 1 0 1 1 1 0 1 1 0 0 0
0 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 0 1 0 0 0 1 1 1 1 1 1 1 0
1 0 0 1 1 0 1 0 0 0 0 1 1 0 1 0 1 0 0 0 1 1 1 1 1 1 1 0 0 0
1 0 0 1 0 1 0 1 1 0 1 1 1 1 0 1 0 1 0 0 1 1 0 1 1 1 0 1 1 1
1 1 0 0 1 1 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 1 0 1 0
1 1 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 0 1 1 1 1
0 1 0 1 0 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 1 0 1 1 1 0 1 0 0 1
1 1 0 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 1 1 1 0 0 1 1 0 0 0 1 1
output =29

case =7
input =30 20
0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 0
0 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 0 1 0 1
1 0 1 0 1 1 1 1 0 1 1 0 0 0 1 1 1 0 0 1
1 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 1 1
1 0 1 0 1 0 1 0 0 1 1 1 0 1 1 0 0 1 0 1
0 1 1 0 0 0 0 1 1 0 0 1 0 1 1 1 1 0 1 0
0 1 0 0 1 1 0 1 1 1 0 0 1 0 0 1 0 0 1 1
1 1 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 0 1
1 1 0 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 1
0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0
0 1 1 1 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1
1 0 1 1 0 0 1 0 1 0 1 0 0 1 1 1 0 0 1 0
1 0 1 1 0 0 1 1 0 0 1 0 1 1 0 0 1 0 0 1
1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 1 0 1 0
1 1 1 1 1 0 0 1 1 1 0 1 0 0 0 1 0 1 1 1
0 1 1 0 0 1 1 1 1 0 0 1 1 0 0 0 1 1 0 1
0 0 1 0 1 0 1 0 0 0 1 0 1 0 0 1 0 0 1 0
0 1 0 1 0 1 1 1 1 0 0 0 1 1 1 1 0 0 0 0
0 0 1 1 1 0 0 0 1 0 1 0 1 0 0 1 0 0 0 1
1 1 1 0 0 0 0 0 1 0 0 0 1 1 1 0 1 0 1 1
0 0 1 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 0
1 0 0 1 0 1 1 1 0 1 1 0 1 0 0 0 1 1 0 1
1 1 0 1 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0
1 1 1 1 0 0 0 1 0 0 1 0 0 1 1 1 0 1 1 1
1 1 1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 1
1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1 1 0 1
1 1 0 0 1 1 1 0 1 0 1 0 1 1 0 0 0 1 0 0
1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0
1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 0 0
0 1 0 0 1 1 1 0 0 0 1 0 1 0 0 1 1 0 0 1
output =31

case =8
input =30 30
0 0 0 1 1 0 1 0 0 0 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 0 1 1 0
1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 1 1 1 1 0 1 1 1
1 1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 0 0 1 1 1 0 0 1 1 0 0 0 0 0
1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 0 1
0 0 1 0 1 0 1 1 1 0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1
0 0 1 1 1 0 1 0 0 1 1 1 0 0 1 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0
0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 0 1 1 0 0 0 1 1 1
1 1 1 1 0 1 1 1 1 0 0 0 0 1 1 0 1 1 0 1 0 0 1 0 1 0 1 0 1 0
0 1 1 0 0 0 1 0 0 0 1 0 1 0 0 1 0 1 1 1 0 1 1 1 0 0 0 1 0 1
0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 1 1 0 1 1 0 0 1 0
1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 1 0 0 1 1 0 0 0 0 1
0 0 1 0 0 0 1 1 0 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0
1 0 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 0 0 1
1 1 1 0 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 0 1 1 1 0 1 1 0 0 1 1
0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 0 1 1 0 1 1 0
0 1 1 0 1 0 1 0 1 0 0 0 1 1 1 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0
1 1 0 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0
0 1 1 1 0 1 1 0 1 0 0 1 1 0 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 1
0 1 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 0
1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 0 0 1 0 1 1
1 1 1 1 1 0 1 1 0 0 1 1 0 0 1 0 0 1 1 0 0 1 0 1 1 1 0 0 0 1
0 1 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 1 0 1
1 0 1 0 1 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 1 1 0 0 0 1 0 0
1 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 1 0 0 1 0 0 0 0
0 1 1 1 1 0 0 1 1 1 0 0 1 0 1 0 1 1 0 1 0 1 0 1 1 0 0 0 0 1
0 0 1 0 1 0 1 0 1 1 0 1 0 1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 1 0
1 1 1 0 0 1 0 1 0 1 1 1 1 0 0 0 0 1 1 1 1 1 1 0 1 0 0 0 1 1
1 1 1 0 0 0 1 0 0 1 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1
0 1 1 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 1 1 0 0 0 1 1 0 1 0 1 1
1 1 0 0 1 0 0 1 1 0 0 1 1 0 1 1 0 0 1 0 1 1 1 0 0 0 1 0 1 0
output =48

*/