/*
Clavius, the person who suggested grouping of data using brackets.
He has suggested that the group of brackets should be Well-Formed.

A string is said to be Well-Formed, if:
    - Any open bracket must have corresponding two consecutive close brackets.
    - Open bracket must appear before the corresponding close brackets.

You will be given a string B, consists of square brackets only '[' , ']'.
In one operation, you can insert one square bracket at any position of B.
i.e., Given B = [[]]], in one operation you can add a open square bracket,
now B can be Well-Formed string, if you add at index 2,3,4 or 5 => [[]]]]

Your task is to return the least number of operations required,
to make B as a Well-Formed string.

Input Format:
-------------
A string, B contains only characters '[', ']'

Output Format:
--------------
Print an integer value.


Sample Input-1:
---------------
[]]][

Sample Output-1:
----------------
4


Sample Input-2:
---------------
[]][[]]

Sample Output-2:
----------------
2


*/
import java.util.*;

class ClosedBrackets{
    public int minInsertions(String s) {
        int res = 0, right = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == '[') {
                if (right % 2 > 0) {
                    right--;
                    res++;
                }
                right += 2;
            } else {
                right--;
                if (right < 0) {
                    right += 2;
                    res++;
                }
            }
        }
        return right + res;
    }

	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		String str=sc.next();
		System.out.println(new ClosedBrackets().minInsertions(str));
	}	
}


/*
=== testcases ===
case =1
input =]]]]][[[[][[[[]][[[[
output =25

case =2
input =]]]]][[[[][[[[]][[[[]]]]][[[[][[[[]][[[[
output =41

case =3
input =[[[][][][][]]][[][[[[][[][[[][]]][]]][[[][][][][]]][][]][][[]][[][]]][]][]][][]]][]]]]][][][][[[[[][
output =47

case =4
input =]][[[[[][]]]]]]]]]][[]]]]]][[][]]][[][[[]]][]][[][][]]][][][][]]]][]][[]]][[[][][[][]][[[]][[][[[[][]]][[]][][][[][]][]][[[[][[[][]]]]]][[[]]]]][]]]][
output =54

case =5
input =][][]]][][[[][[[][[[]]][]][][]][[[[[[[]][[][]][][][[[[[[][[[[]][[[][[[]]][]]]]][]][[][[[[[[][]]]][[][[[]]][]]]]][[]][][[]][]][[[[]]][][][][[[][]]][[[[][[[][[][[]]]]]][[][[[[]][[[][[]]]][][][[][[]][[[]
output =130

case =6
input =][][][][][[]]]][[[]]]][[]]][][]]]]][][[][[][[]][[[][]][][]]]][[]]]]][[][[][[][][][[[]]]][][[[[[][[]]][[[][[]]]]][[]][[[]][[][][]]][[[[][][]][][[][[[[]][[]][[[[[][[[[[[][][[[[[]][]]][[[[][[[]][[[][[[]]]]][[][[[[]][]]][][]]][][][][]]]][]]][][[[[][]]][]][]][]][][]][[]][]][][[[[[][[[[]]][][][]][[]][]][[[[][[[[[[[]][[[[[][]][][[[[]][][][][][][[][[][[]]]]]]]]]]]]][[]][][[]]][][]][[[]][[][[][][][]][[[[[[
output =227

case =7
input =]][][[[[[[[][]]][]]]]]][[]][[[][[][][[]][][]]][[[[[[[][[]]]][[[][[[][[[][][[[[[[[]][[[][[[[[[]][]][[]]]][[[[[[][][][[[[]]][][]]][]]]]]][][[][][]]][[[[[[][[][][][][[[[[[]][[][[[[[[]][[[][][[[][]]][]][[][][][[[]][[[[][[[][[][][[][]][[[]][[]][][[][]][][]]]][[[]][[[[][[[[]]]][]][][]]][[[]]]]][]]][[][][]][][]][][[][][[[[[[]]]][[]][[[[[[[]][][[]]][[][][][][[[[]][[[[[[[[[[[]][]]]][][]][][]]]]]][[[][]]][[]][[]][][[][]][[[]]]][][[[][][][[[[[[[[[[[[[[][][[][]][][[][[[][[][[[[[[[[][]][][[]]][]][[]][[[]]]]]][[]][][[][]]]]]][[[][[][[][][]][]][][[][[[]]][][[[]]]][]][]][[[]]]][]]][[]][[][]][]][[[[]]]][][][][][]][[][]][[][]]][][][[[][[[[]]][[[[[[[[]]]]][[]][]][[][[]]]]][[[[[][[[][][[[][]][[][[]]]][[][][[][]]][[][[[][][[]][]]]]]][]][[[[]]][[]]]]][[]]][[][][
output =462

case =8
input
output =567

*/